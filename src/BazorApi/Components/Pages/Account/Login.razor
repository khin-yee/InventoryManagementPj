@page "/Login"
@using BazorApi.ApiControl
@using BazorApi.Model.ViewModels
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager navigationManager
@inject IApiCall apicall

<h3>Login</h3>
<div class="row">
     <div class="col-lg-4 offset-lg-4 pt-4  pb-4 border">
         <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
             <DataAnnotationsValidator/>
             <div class="mb-3 text-center flex-column">
                 <h3>Login</h3>
             </div>
             <div class="mb-3">
                 <label>User Name</label>
                 <InputText @bind-Value="Model.username" class="form-control" placeholder ="UserName"/>
                 <ValidationMessage For="()=>Model.username"/>
             </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.password" class="form-control" placeholder="Password" />
                <ValidationMessage For="()=>Model.password" />
            </div>
            <div class="mb-3 text-center">
                <span class=" text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
         </EditForm>

     </div>
</div>
@code {
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var  user = await apicall.GetAccountAuth(Model.username,Model.password);
        if(user == null || user.Password != Model.password)
        {
            errorMessage = "Invalid User Name or Password";
            return;
        }
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name,Model.username),
            new Claim(ClaimTypes.Role,user.Role)
        };
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContextAccessor.HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/");
    }
}
 